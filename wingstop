import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import PolynomialFeatures
import scipy.stats as stats

# Load the datasets
daily_sales = pd.read_csv(r"C:\Users\19894\Downloads\wingstop_daily_sales.csv")
weekly_sales = pd.read_csv(r"C:\Users\19894\Downloads\wingstop_weekly_sales.csv")


# Preprocess daily sales data
daily_sales['Date'] = pd.to_datetime(daily_sales['Date'])
daily_sales['Month'] = daily_sales['Date'].dt.month
daily_sales['DayOfWeek'] = daily_sales['Date'].dt.day_name()

# Create features for weekly data
weekly_sales['Week Date'] = pd.to_datetime(weekly_sales['Week Date'])
weekly_data = weekly_sales.copy()

# One-hot encode categorical features
weekly_data['High_Season'] = (weekly_data['Week Type'] == 'high').astype(int)
weekly_data['Promotion'] = weekly_data['Promotion']
weekly_data['Football_Match'] = weekly_data['Football Match']
weekly_data['Month'] = weekly_data['Week Date'].dt.month

# Prepare the features and target
X = weekly_data[['High_Season', 'Promotion', 'Football_Match', 'Month']]
y = weekly_data['Sales']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predictions
y_pred = lr_model.predict(X_test)


# Model Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Model Performance:")
print(f"Mean Squared Error: {mse}")
print(f"R-squared Score: {r2}")
# Calculate MAE
mae = mean_absolute_error(y_test, y_pred)

# Calculate RMSE
rmse = np.sqrt(mse)

# Print the results
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Coefficients
coef_df = pd.DataFrame({
    'Feature': X.columns,
    'Coefficient': lr_model.coef_
})
print("\nModel Coefficients:")
print(coef_df)

# Diagnostic Plots
plt.figure(figsize=(15, 10))

# 1. Residual Plot
plt.subplot(2, 2, 1)
residuals = y_test - y_pred
plt.scatter(y_pred, residuals)
plt.title('Residual Plot')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.axhline(y=0, color='r', linestyle='--')

# 2. Q-Q Plot for Normality
plt.subplot(2, 2, 2)
stats.probplot(residuals, dist="norm", plot=plt)
plt.title('Q-Q Plot of Residuals')

# 3. Histogram of Residuals
plt.subplot(2, 2, 3)
plt.hist(residuals, bins=20, edgecolor='black')
plt.title('Histogram of Residuals')
plt.xlabel('Residuals')
plt.ylabel('Frequency')

# 4. Predicted vs Actual
plt.subplot(2, 2, 4)
plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.title('Predicted vs Actual')
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')

plt.tight_layout()
plt.show()

# Future Prediction Function
def predict_sales(high_season, promotion, football_match, month):
    """
    Predict sales based on input features
    
    Parameters:
    - high_season: 1 if it's a high season, 0 otherwise
    - promotion: 1 if there's a promotion, 0 otherwise
    - football_match: 1 if there's a football match, 0 otherwise
    - month: month of the year (1-12)
    
    Returns:
    Predicted sales
    """
    features = np.array([[high_season, promotion, football_match, month]])
    return lr_model.predict(features)[0]

# Example future predictions
future_scenarios = [
    (1, 1, 1, 12),  # High season, promotion, football match, December
    (0, 0, 0, 7),   # Low season, no promotion, no football match, July
    (1, 0, 1, 9)    # High season, no promotion, football match, September
]

print("\nFuture Sales Predictions:")
for scenario in future_scenarios:
    prediction = predict_sales(*scenario)
    print(f"Scenario {scenario}: Predicted Sales = ${prediction:,.2f}")
